name: pelican-build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Daily pick at 05:00 UTC (adjust if you want)
    - cron: "0 5 * * *"
    # Weekly harvest on Sunday 04:30 UTC
    - cron: "30 4 * * 0"

permissions:
  contents: write     # we commit posts / data back to the repo
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # -----------------------------
  # Weekly harvest (refresh pool)
  # -----------------------------
  weekly-harvest:
    name: Weekly harvest (refresh candidate pool)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'schedule' && github.event.schedule == '30 4 * * 0')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python -V

      - name: Harvest candidate pool
        env:
          # Offline toggle; leave "1" so network is allowed on harvest
          HGG_FETCH: "1"
        run: |
          python -m app.main --harvest

      - name: Commit & push updated data (pool/appstats/applist)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add content/data/candidate_pool.json content/data/pool_meta.json content/data/applist.json content/data/appstats || true
          if git diff --cached --quiet; then
            echo "No data changes to commit."
          else
            git commit -m "chore(data): refresh candidate pool [skip ci]"
            git pull --rebase origin main
            git push origin HEAD:main
          fi

  # -----------------------------
  # Daily pick → build → deploy
  # -----------------------------
  daily-pick:
    name: Daily pick (post) + Pelican build + Deploy Pages
    runs-on: ubuntu-latest
    needs: weekly-harvest
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'schedule' && github.event.schedule == '0 5 * * *')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python -V

      # Toggle HGG_FETCH="0" if you want to rebuild without hitting Steam/AI.
      - name: Generate daily post
        env:
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
          HGG_FETCH: "1"
        run: |
          python -m app.main --daily

      - name: Commit & push generated post
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add content/posts/*.md content/data/summaries || true
          if git diff --cached --quiet; then
            echo "No new posts to commit."
          else
            git commit -m "chore(posts): daily pick [skip ci]"
            git pull --rebase origin main
            git push origin HEAD:main
          fi

      - name: Build site with Pelican
        run: |
          export PYTHONPATH="$GITHUB_WORKSPACE"
          pelican content -s publishconf.py -o output

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./output

  # -----------------------------
  # Deploy Pages
  # -----------------------------
  deploy:
    name: Deploy GitHub Pages
    needs: daily-pick
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
